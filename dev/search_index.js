var documenterSearchIndex = {"docs":
[{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"CurrentModule = Results.Functions","category":"page"},{"location":"api/Functions/#functions","page":"Results.Functions","title":"Results.Functions: Functions and Combinators","text":"","category":"section"},{"location":"api/Functions/#Exported-members","page":"Results.Functions","title":"Exported members","text":"","category":"section"},{"location":"api/Functions/#Input/Output-functions","page":"Results.Functions","title":"Input/Output functions","text":"","category":"section"},{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"Modules = [Functions]\r\nPrivate = false\r\nPages = [\"io.jl\"]","category":"page"},{"location":"api/Functions/#Results.Functions.to_nullable","page":"Results.Functions","title":"Results.Functions.to_nullable","text":"to_nullable(val::Option{T})::Union{T, Nothing}\nto_nullable(val::Result{T, E})::Union{T, Nothing}\n\nConvert a Result{T, E} or Option{T} into a simple nullable value Union{T, Nothing}. Note that this may lose structure (this transformation is non-injective, as Some(nothing) and nothing map to the same value).\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.to_option","page":"Results.Functions","title":"Results.Functions.to_option","text":"to_option(value::Union{T, Nothing})::Option{T}\nto_option(value::Result)::Option\n\nConverts a nullable value to an Option. Also converts a Result to an Option, turning Ok into Some and Err into None.\n\nExamples\n\njulia> to_option(\"value\")\nSome(\"value\")\njulia> to_option(Some(5))\nSome(Some(5))\njulia> to_option(nothing) |> println\nnothing\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.to_result","page":"Results.Functions","title":"Results.Functions.to_result","text":"to_result(value::T, err)::Ok{T}\nto_result(value::None, err::E)::Err{E}\nto_result(value::None, err::Function)::Err\n\nConverts a nullable value to a Result, using the supplied error value in place of a nothing. Also converts an Option into a Result, turning Some into Ok and None into Err.\n\nExamples\n\njulia> to_result(\"value\", \"error\")\nOk(\"value\")\njulia> to_result(nothing, \"error\")\nErr(\"error\")\njulia> to_result(\"value\", () -> println(\"lazily calculates errors\"))\nOk(\"value\")\njulia> to_result(Ok(5), nothing)\nOk(Ok(5))\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.to_result-Tuple{Any}","page":"Results.Functions","title":"Results.Functions.to_result","text":"to_result(err)::Function\n\nPartially-applied version of to_result.\n\nExamples\n\njulia> 5 |> to_result(\"error\")\nOk(5)\njulia> nothing |> to_result(\"error\")\nErr(\"error\")\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.unwrap","page":"Results.Functions","title":"Results.Functions.unwrap","text":"unwrap(o::Option{T})::T\nunwrap(r::Result{T, E})::T\nunwrap(o::Union{Option, Result}, error::Function)\nunwrap(o::Union{Option, Result}, error::Exception)\nunwrap(o::Union{Option, Result}, error::String)\n\nUnwrap an Ok value. Throws an error if r is Err instead.\n\nIn the two argument form, error is raised if it is an Exception. If it is a string, it is passed as a message to UnwrapError. If it is a function, it is called with an error value to produce an error.\n\nExamples\n\njulia> unwrap(Ok(5))\n5\njulia> unwrap(Err(0))\nERROR: Results.Types.UnwrapError(\"unwrap() called on an Err: 0\")\njulia> unwrap(none)\nERROR: Results.Types.UnwrapError(\"unwrap() called on None\")\njulia> unwrap(none, \"value is none\")\nERROR: Results.Types.UnwrapError(\"value is none\")\njulia> unwrap(nothing, BoundsError([1,2]))\nERROR: BoundsError: attempt to access 2-element Array{Int64,1}\njulia> unwrap(Err(5), v -> \"Error value '\" * string(v) * \"'\")\nERROR: Results.Types.UnwrapError(\"Error value '5'\")\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.unwrap_or","page":"Results.Functions","title":"Results.Functions.unwrap_or","text":"unwrap_or(o::Option{T}, default)::T\nunwrap_or(r::Result{T, E}, default)::T\n\nUnwrap an Ok value, or return default. default may be T or a function returning T.\n\nExamples\n\njulia> unwrap_or(Ok(\"value\"), \"error\")\n\"value\"\njulia> unwrap_or(Err(5), \"error\")\n\"error\"\njulia> unwrap_or(Some(\"value\"), () -> begin println(\"Generating error\"); \"error\" end)\n\"value\"\njulia> unwrap_or(None(), () -> begin println(\"Generating error\"); \"error\" end)\nGenerating error\n\"error\"\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Combinators","page":"Results.Functions","title":"Combinators","text":"","category":"section"},{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"Modules = [Functions]\r\nPrivate = false\r\nPages = [\"transform.jl\"]","category":"page"},{"location":"api/Functions/#Results.Functions.and_then-Tuple{Union{Err{E}, Ok{T}} where E where T,Vararg{Union{Function, Type, Union{Err{E}, Ok{T}} where E where T},N} where N}","page":"Results.Functions","title":"Results.Functions.and_then","text":"and_then(result::Result, funcs...)::Result\n\nBind result to the proceeding functions. If result is Ok, its contents will be passed to each function in turn. Any Err value will be returned immediately.\n\nExamples\n\njulia> Ok(\"Build\") ⊗ val -> Ok(string(val, \" a \")) ⊗ val -> Ok(string(val, \"string\"))\nOk(\"Build a string\")\njulia> Err(\"Error\") ⊗ val -> Ok(string(val, \" a \")) ⊗ val -> Ok(string(val, \"string\"))\nErr(\"Error\")\njulia> Ok(\"Build\") ⊗ val -> Err(\"Error\") ⊗ function (val) error(\"long circuited\"); Ok(\"value\") end\nErr(\"Error\")\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.and_then-Tuple{Union{Function, Type}}","page":"Results.Functions","title":"Results.Functions.and_then","text":"and_then(func::Base.Callable)::Function\n\nPartially-applied version of and_then.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.and_then-Tuple{Union{Nothing, Some{T}} where T,Vararg{Union{Function, Type, Union{Nothing, Some{T}} where T},N} where N}","page":"Results.Functions","title":"Results.Functions.and_then","text":"and_then(option::Option, funcs...)::Option\n\nBind option to the proceeding functions. While option is Some, its contents will be passed to each function in turn. Any None will be returned immediately.\n\nExamples\n\njulia> Some(\"Build\") ⊗ val -> Some(string(val, \" a \")) ⊗ val -> Some(string(val, \"string\"))\nSome(\"Build a string\")\njulia> none ⊗ val -> Some(string(val, \" a \")) ⊗ val -> Some(string(val, \"string\"))\n\njulia> Some(\"Build\") ⊗ val -> none ⊗ function (val) error(\"long circuited\"); Some(\"value\") end\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.flatten","page":"Results.Functions","title":"Results.Functions.flatten","text":"flatten(o::Option{Option{T}})::Option{T}\nflatten(r::Result{Result{T, E1}, E2})::Result{T, Union{E1, E2}}\n\nFlatten one layer of a nested Option or Result type.\n\nExamples\n\njulia> Ok(Ok(5)) |> flatten\nOk(5)\njulia> Ok(Err(\"inner\")) |> flatten\nErr(\"inner\")\njulia> Some(Some(Some(5))) |> flatten\nSome(Some(5))\njulia> Ok(Some(5)) |> flatten  # mixed Option and Result types not supported\nERROR: MethodError\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.map_err","page":"Results.Functions","title":"Results.Functions.map_err","text":"map_err(f, result::Result)::Result\n\nMap f over the contents of an Err value, leaving an Ok value untouched.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.map_err-Tuple{Any}","page":"Results.Functions","title":"Results.Functions.map_err","text":"map_err(f)::Function\n\nPartially-applied version of map_err.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.ok","page":"Results.Functions","title":"Results.Functions.ok","text":"ok(r::Result{T, E})::Option{T}\n\nConvert a Result into an Option, discarding any Err value.\n\nExamples\n\njulia> ok(Ok(5))\nSome(5)\njulia> ok(Err(\"error\")) |> println\nnothing\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.ok_or","page":"Results.Functions","title":"Results.Functions.ok_or","text":"ok_or(o::Some{T}, err)::Ok{T}\nok_or(::None, err::E)::Err{E}\nok_or(::None, err::Function)::Err\n\nConvert an Option into a Result, using the supplied error value in place of None.\n\nExamples\n\njulia> ok_or(Some(5), \"error\")\nOk(5)\njulia> ok_or(None(), \"error\")\nErr(\"error\")\njulia> ok_or(None(), () -> \"lazy error\")\nErr(\"lazy error\")\njulia> None() |> ok_or(\"partially applied\")\nErr(\"partially applied\")\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.ok_or-Tuple{Any}","page":"Results.Functions","title":"Results.Functions.ok_or","text":"ok_or(err)::Function\n\nPartially-applied version of ok_or.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.try_collect-Tuple{Any}","page":"Results.Functions","title":"Results.Functions.try_collect","text":"try_collect(iter)\ntry_collect(result::Result, results...)::Result{Vector}\ntry_collect(option::Option, options...)::Option{Vector}\n\nCollect an iterator of Options or Results into a single Option or Result containing an array. Short-circuits on error.\n\nExamples\n\njulia> try_collect([Ok(5), Ok(10), Ok(3)])\nOk([5, 10, 3])\njulia> try_collect([Ok(10), Err(\"err1\"), Err(\"err2\")])\nErr(\"err1\")\njulia> try_collect([Ok(10), None(), Ok(5)])  # be careful mixing Result with Option!\nOk(Union{Nothing, Int64}[10, nothing, 5])\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.try_map","page":"Results.Functions","title":"Results.Functions.try_map","text":"try_map(f, opt::Option...)::Option\ntry_map(f, rslt::Result...)::Result\ntry_map(f::Option, rslt::Option...)::Option\ntry_map(f::Result, rslt::Result...)::Result\n\nMap f over the contents of an Ok or Some value, leaving a None or Err value untouched.\n\nExample\n\njulia> try_map((x) -> 2*x, Ok(5))\nOk(10)\njulia> try_map(+, Err(\"First error\"), Err(\"Second error\"))\nErr(\"First error\")\njulia> try_map.((x) -> 2*x, [Ok(5), Err(\"missing value\")])\n2-element Array{Any,1}:\n Ok(10)\n Err(\"missing value\")\njulia> try_map(Ok(+), Ok(5), Ok(10))\nOk(15)\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.try_map-Tuple{Any}","page":"Results.Functions","title":"Results.Functions.try_map","text":"try_map(f)::Function\n\nPartially-applied version of try_map.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Predicate-functions","page":"Results.Functions","title":"Predicate functions","text":"","category":"section"},{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"Modules = [Functions]\r\nPrivate = false\r\nPages = [\"predicates.jl\"]","category":"page"},{"location":"api/Functions/#Results.Functions.has_val","page":"Results.Functions","title":"Results.Functions.has_val","text":"has_val(result::Union{Result, Option})::Bool\n\nReturns true for a successful Result or Option.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.is_err","page":"Results.Functions","title":"Results.Functions.is_err","text":"is_err(r::Result)::Bool\n\nReturn whether a Result is Err.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.is_err-Tuple{Union{Err{E}, Ok{T}} where E where T,Any}","page":"Results.Functions","title":"Results.Functions.is_err","text":"is_err(r::Result, value)::Bool\n\nReturn whether a Result contains an error equal to value.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.is_none-Tuple{Some}","page":"Results.Functions","title":"Results.Functions.is_none","text":"is_none(o::Option)::Bool\n\nReturn whether an Option is None. Equivalent to Base.isnothing.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.is_ok","page":"Results.Functions","title":"Results.Functions.is_ok","text":"is_ok(r::Result)::Bool\n\nReturn whether a Result is Ok or Err.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.is_ok-Tuple{Union{Err{E}, Ok{T}} where E where T,Any}","page":"Results.Functions","title":"Results.Functions.is_ok","text":"is_ok(r::Result, value)::Bool\n\nReturn whether a Result contains a value equal to value.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.is_some","page":"Results.Functions","title":"Results.Functions.is_some","text":"is_some(o::Option)::Bool\n\nReturn whether an Option is Some.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.is_some-Tuple{Union{Nothing, Some{T}} where T,Any}","page":"Results.Functions","title":"Results.Functions.is_some","text":"is_some(o::Option, value)::Bool\n\nReturn whether an Option contains a value equal to value.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Un-exported-members","page":"Results.Functions","title":"Un-exported members","text":"","category":"section"},{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"Modules = [Functions]\r\nPublic = false\r\nOrder = [:module, :type, :constant, :function, :macro]\r\nFilter = f -> !isa(f, Function) || parentmodule(f) != Base","category":"page"},{"location":"api/Functions/#Results.Functions.:←","page":"Results.Functions","title":"Results.Functions.:←","text":"Shorthand for try_map. Enter as \\leftarrow.\n\nExample\n\njulia> Ok(x -> 2*x) ← Ok(5)\nOk(10)\njulia> x -> 2*x ← Ok(5)  # Be careful with precedence!\n#1 (generic function with 1 method)\njulia> (x -> 2*x) ← (x -> x+7) ← Some(3)\nSome(20)\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.:→","page":"Results.Functions","title":"Results.Functions.:→","text":"Argument-swapped version of try_map. Enter as \\rightarrow.\n\nExample\n\njulia> Some(5) → x -> 2*x\nSome(10)\njulia> Ok(5) → (x -> 2*x) → (x -> x+7)  # arrows in Julia are right-associative!\nERROR: MethodError\njulia> Ok(5) → (x -> 2*x) ∘ (x -> x+7) # but this will work\nOk(24)\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.:⊗","page":"Results.Functions","title":"Results.Functions.:⊗","text":"Shorthand for and_then (monadic bind). Enter with \\otimes\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.strip_option_type-Tuple{Type}","page":"Results.Functions","title":"Results.Functions.strip_option_type","text":"strip_option_type(ty::Type)::Type\n\nReturn the passed type with one layer of Option values stripped.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.strip_result_type-Tuple{Type}","page":"Results.Functions","title":"Results.Functions.strip_result_type","text":"strip_result_type(ty::Type)::Type\n\nReturn the passed type with one layer of Result values stripped.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Results.Functions.try_collect_option","page":"Results.Functions","title":"Results.Functions.try_collect_option","text":"try_collect_option(iter)::Option{Vector}\ntry_collect_option(options...)::Option{Vector}\n\nVersion of try_collect specialized for use with Option Prefer this over try_collect whenever possible to prevent surprising behavior.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#Results.Functions.try_collect_result","page":"Results.Functions","title":"Results.Functions.try_collect_result","text":"try_collect_result(iter)::Result{Vector}\ntry_collect_result(results...)::Result{Vector}\n\nVersion of try_collect specialized for use with Result. Prefer this over try_collect whenever possible to prevent surprising behavior.\n\n\n\n\n\n","category":"function"},{"location":"api/Functions/#[Base](https://docs.julialang.org/en/v1/base/base/)-methods-extended","page":"Results.Functions","title":"Base methods extended","text":"","category":"section"},{"location":"api/Functions/","page":"Results.Functions","title":"Results.Functions","text":"Modules = [Functions]\r\nOrder = [:function]\r\nFilter = f -> parentmodule(f) == Base","category":"page"},{"location":"api/Functions/#Base.:!-Union{Tuple{Ok{T}}, Tuple{T}} where T","page":"Results.Functions","title":"Base.:!","text":"(!)(result::Result{T,E})::Result{E,T}\n\nFlip an Ok value to an Err value and vice versa.\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Base.:&-Tuple{Union{Err{E}, Ok{T}} where E where T,Vararg{Any,N} where N}","page":"Results.Functions","title":"Base.:&","text":"(&)(result::Result, results...)::Result\n(&)(option::Option, options...)::Option\n\nReturn the final Ok/Some only if every argument is Ok/Some. Otherwise return the first Err value.\n\nValues can be supplied either as Result/Options or as functions that yield a Result/Option.\n\nExamples\n\njulia> Ok(\"v1\") & Ok(\"v2\") & () -> Ok(\"v3\")\nOk(\"v3\")\n\njulia> Ok(\"v1\") & () -> Err(2) & () -> Ok(\"v2\")\nErr(2)\n\njulia> Some(5) & Some(10) & None()\n\n\n\n\n\n","category":"method"},{"location":"api/Functions/#Base.:|-Tuple{Union{Err{E}, Ok{T}} where E where T,Vararg{Any,N} where N}","page":"Results.Functions","title":"Base.:|","text":"(|)(result::Result, results...)::Result\n(|)(option::Option, options...)::Option\n\nReturn the first Ok value found. If no arguments are Ok, return the final Err value.\n\nValues can be supplied either as Results or as functions that yield a Result.\n\nExamples\n\njulia> Err(\"err1\") | Ok(\"v2\") | () -> Ok(\"v3\")\nOk(\"v2\")\njulia> Err(\"err1\") | () -> Err(\"err2\") | Err(\"err3\")\nErr(\"err3\")\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"Results","title":"Results","text":"CurrentModule = Results","category":"page"},{"location":"api/#API","page":"Results","title":"API","text":"","category":"section"},{"location":"api/","page":"Results","title":"Results","text":"Results.jl is structured into four modules:","category":"page"},{"location":"api/","page":"Results","title":"Results","text":"Results.Types defines the core types\nResults.Functions defines functions for operating on Results and Options\nResults.Macros defines macros for working with result types\nResults.Collection defines Option interfaces for working with collections\nResults.Operators defines operators for working with result types.","category":"page"},{"location":"api/","page":"Results","title":"Results","text":"Important members of each module are re-exported, so the end user usually does not need to import these modules directly. Operators are not exported by default.","category":"page"},{"location":"api/Collection/","page":"Results.Collection","title":"Results.Collection","text":"CurrentModule = Results.Collection","category":"page"},{"location":"api/Collection/#collection","page":"Results.Collection","title":"Results.Collection: Collection utilities","text":"","category":"section"},{"location":"api/Collection/#Exported-members","page":"Results.Collection","title":"Exported members","text":"","category":"section"},{"location":"api/Collection/","page":"Results.Collection","title":"Results.Collection","text":"Modules = [Collection]\r\nPrivate = false","category":"page"},{"location":"api/Collection/#Results.Collection.try_first-Tuple{AbstractString,Integer}","page":"Results.Collection","title":"Results.Collection.try_first","text":"try_first(s::AbstractString, n::Integer)::Option{AbstractString}\n\nTry to get the first n chars from a string.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_first-Tuple{Any}","page":"Results.Collection","title":"Results.Collection.try_first","text":"try_first(c)::Option\n\nTry to get the first element from a collection. Uses Base.firstindex under the hood.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_get","page":"Results.Collection","title":"Results.Collection.try_get","text":"Try to get a value from an array or collection.\n\n\n\n\n\n","category":"function"},{"location":"api/Collection/#Results.Collection.try_get-Tuple{AbstractString,Integer}","page":"Results.Collection","title":"Results.Collection.try_get","text":"try_get(s::AbstractString, i::Integer)::Option{AbstractChar}\n\nTry to retrieve index index from a string. Uses Base.checkbounds and Base.isvalid under the hood.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_get-Tuple{Any,Vararg{Any,N} where N}","page":"Results.Collection","title":"Results.Collection.try_get","text":"try_get(collection, index...)::Option\n\nFallback method for try_get. Relies on exception-handling, so it is slower than the specialized methods.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_get-Tuple{NamedTuple,Union{Integer, Symbol}}","page":"Results.Collection","title":"Results.Collection.try_get","text":"try_get(t::NamedTuple, k::Union{Integer, Symbol})::Option\n\nTry to retrieve member k from a Base.NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_get-Union{Tuple{T}, Tuple{AbstractArray{T,N} where N,Vararg{Integer,N} where N}} where T","page":"Results.Collection","title":"Results.Collection.try_get","text":"try_get(a::AbstractArray{T}, index::Integer...)::Option{T}\n\nTry to retrieve index index from an array. Uses Base.isassigned under the hood.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_get-Union{Tuple{V}, Tuple{K}, Tuple{AbstractDict{#s13,V} where #s13>:K,K}} where V where K","page":"Results.Collection","title":"Results.Collection.try_get","text":"try_get(d:AbstractDict{>:K, V}, k::K)::Option{V}\n\nTry to retrive key k from a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_last-Tuple{Any}","page":"Results.Collection","title":"Results.Collection.try_last","text":"try_last(c)::Option\n\nTry to get the last element from a collection.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_peek","page":"Results.Collection","title":"Results.Collection.try_peek","text":"try_peek(iter; state=missing)::Option\n\nTry to get the next value from an iterator. If state is not missing, use it in the call to iterate.\n\n\n\n\n\n","category":"function"},{"location":"api/Collection/#Results.Collection.try_pop!","page":"Results.Collection","title":"Results.Collection.try_pop!","text":"Try to pop a value from a collection.\n\n\n\n\n\n","category":"function"},{"location":"api/Collection/#Results.Collection.try_pop!-Tuple{Base.Iterators.Stateful}","page":"Results.Collection","title":"Results.Collection.try_pop!","text":"try_pop!(iter::Iterators.Stateful)::Option\n\nTry to pop a value from a Stateful iterator.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_pop!-Union{Tuple{AbstractArray{T,N} where N}, Tuple{T}} where T","page":"Results.Collection","title":"Results.Collection.try_pop!","text":"try_pop!(a::AbstractArray{T})::Option{T}\n\nTry to pop a value from an array.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_pop!-Union{Tuple{AbstractDict{K,V}}, Tuple{V}, Tuple{K}} where V where K","page":"Results.Collection","title":"Results.Collection.try_pop!","text":"try_pop!(d::AbstractDict{>:K, V}, key::K)::Option{Pair{K, V}}\n\nTry to pop a key-value pair from a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Results.Collection.try_pop!-Union{Tuple{V}, Tuple{K}, Tuple{AbstractDict{#s13,V} where #s13>:K,K}} where V where K","page":"Results.Collection","title":"Results.Collection.try_pop!","text":"try_pop!(d::AbstractDict{>:K, V}, key::K)::Option{V}\n\nTry to pop the value corresponding to key key from a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/Collection/#Un-exported-members","page":"Results.Collection","title":"Un-exported members","text":"","category":"section"},{"location":"api/Collection/","page":"Results.Collection","title":"Results.Collection","text":"Modules = [Collection]\r\nPublic = false","category":"page"},{"location":"api/Macros/","page":"Results.Macros","title":"Results.Macros","text":"CurrentModule = Results.Macros","category":"page"},{"location":"api/Macros/#macros","page":"Results.Macros","title":"Results.Macros: Macros","text":"","category":"section"},{"location":"api/Macros/#Exported-members","page":"Results.Macros","title":"Exported members","text":"","category":"section"},{"location":"api/Macros/","page":"Results.Macros","title":"Results.Macros","text":"Modules = [Results.Macros]\r\nPrivate = false\r\nOrder = [:macro]","category":"page"},{"location":"api/Macros/#Results.Macros.@catch_result-Tuple{Any,Any}","page":"Results.Macros","title":"Results.Macros.@catch_result","text":"Catches an exception inside expr and returns a Result instead.\n\nIf a type is given, only exceptions of that type will be caught.\n\nExamples\n\njulia> @catch_result begin\n           arr = [5,3,2]\n           arr[4]\n       end\nErr(BoundsError([5, 3, 2], (4,)))\njulia> @catch_result [5,3,2][3]\nOk(2)\njulia> @catch_result TypeError [5,3,2][4]\nERROR: BoundsError: attempt to access 3-element Array{Int64,1} at index [4]\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Results.Macros.@if_let-Tuple{Expr,Expr,Expr}","page":"Results.Macros","title":"Results.Macros.@if_let","text":"Run then_block if the assignment expression returns an Ok or Some value. Runs else_block otherwise.\n\nExample\n\njulia> @if_let val = Some(5) begin\n           2*val\n       end begin\n           0\n       end\n10\njulia> @if_let val = Err(\"error\") begin\n           2*val\n       end begin\n           0\n       end\n0\njulia> @if_let val = Err(\"error\") begin\n           println(val)\n       end\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Results.Macros.@some_if-Tuple{Any,Any}","page":"Results.Macros","title":"Results.Macros.@some_if","text":"If predicate, evaluate the enclosed expression wrapped in Some. Otherwise, return None.\n\nExample\n\njulia> try_get(a, index) = @some_if isassigned(a, index) a[index]\ntry_get (generic function with 1 method)\njulia> try_get([2,3,4], 2)\nSome(3)\njulia> try_get([1,2,3], 10)\n\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Results.Macros.@try_unwrap-Tuple{Any}","page":"Results.Macros","title":"Results.Macros.@try_unwrap","text":"Unwraps an Ok or Some value, while returning error values upstream. Highly useful for chaining computations together.\n\nExample\n\njulia> function test(x::Result)::Result\n           y = @try_unwrap(x) .- 5\n           z = @try_unwrap try_pop!(y) |> ok_or(\"Empty array\")\n           Ok(z)\n       end\ntest (generic function with 1 method)\n\njulia> test(Ok([5, 8]))\nOk(3)\njulia> test(Ok([]))\nErr(\"Empty array\")\njulia> test(Err(5))\nErr(5)\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Results.Macros.@unwrap_or-Tuple{Any,Any}","page":"Results.Macros","title":"Results.Macros.@unwrap_or","text":"Macro version of unwrap_or, which allows for the embedding of control statements in the or clause.\n\nExample\n\njulia> for v in [[2,3,4], [3,4,5], [], [1]]\n           println(@unwrap_or(try_get(v, 1), break))\n       end\n2\n3\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Results.Macros.@while_let-Tuple{Expr,Expr}","page":"Results.Macros","title":"Results.Macros.@while_let","text":"Loop block while the assignment expression assign returns an Ok or Some value.\n\nExample\n\njulia> a = [1,2,3];\n\njulia> @while_let val = try_pop!(a) begin\n           print(val)\n       end\n321\n\n\n\n\n\n","category":"macro"},{"location":"api/Macros/#Un-exported-members","page":"Results.Macros","title":"Un-exported members","text":"","category":"section"},{"location":"api/Macros/","page":"Results.Macros","title":"Results.Macros","text":"Modules = [Results.Macros]\r\nPublic = false\r\nOrder = [:macro]","category":"page"},{"location":"api/Types/","page":"Results.Types","title":"Results.Types","text":"CurrentModule = Results.Types","category":"page"},{"location":"api/Types/#types","page":"Results.Types","title":"Results.Types: Core types","text":"","category":"section"},{"location":"api/Types/#Exported-members","page":"Results.Types","title":"Exported members","text":"","category":"section"},{"location":"api/Types/","page":"Results.Types","title":"Results.Types","text":"Modules = [Types]\r\nPrivate = false\r\nOrder = [:module, :type, :constant, :function, :macro]","category":"page"},{"location":"api/Types/#Results.Types.Err","page":"Results.Types","title":"Results.Types.Err","text":"Represents an computation error.\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#Results.Types.None","page":"Results.Types","title":"Results.Types.None","text":"Shorthand for Nothing.\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#Results.Types.Ok","page":"Results.Types","title":"Results.Types.Ok","text":"Represents an Ok result of computation.\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#Results.Types.Option","page":"Results.Types","title":"Results.Types.Option","text":"Synonym for Union{Some{T}, None}.\n\nOptions implement the following protocols:\n\niterate: Yields one T if the Option is Some, yields nothing otherwise.\nlength: Returns 1 if the Result is Ok, 0 if Err\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#Results.Types.Result","page":"Results.Types","title":"Results.Types.Result","text":"Synonym for Union{Ok{T}, Err{E}}.\n\nAs well as working with the Result combinators defined below, Results implement the following protocols:\n\niterate: Yields one T if the Result is Ok, yields nothing otherwise.\nlength: Returns 1 if the Result is Ok, 0 if Err\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#Results.Types.none","page":"Results.Types","title":"Results.Types.none","text":"Shorthand for nothing.\n\n\n\n\n\n","category":"constant"},{"location":"api/Types/#Un-exported-members","page":"Results.Types","title":"Un-exported members","text":"","category":"section"},{"location":"api/Types/","page":"Results.Types","title":"Results.Types","text":"Modules = [Types]\r\nPublic = false\r\nOrder = [:module, :type, :constant, :function, :macro]\r\nFilter = f -> !isa(f, Function) || parentmodule(f) != Base","category":"page"},{"location":"api/Types/#Results.Types.UnwrapError","page":"Results.Types","title":"Results.Types.UnwrapError","text":"Exception thrown when unwrap() is called on an Err\n\n\n\n\n\n","category":"type"},{"location":"api/Types/#[Base](https://docs.julialang.org/en/v1/base/base/)-methods-extended","page":"Results.Types","title":"Base methods extended","text":"","category":"section"},{"location":"api/Types/","page":"Results.Types","title":"Results.Types","text":"Modules = [Types]\r\nOrder = [:function]\r\nFilter = f -> parentmodule(f) == Base","category":"page"},{"location":"api/Types/#Base.:==-Tuple{Err,Err}","page":"Results.Types","title":"Base.:==","text":"Base.isequal for Err values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.:==-Tuple{Ok,Ok}","page":"Results.Types","title":"Base.:==","text":"Base.isequal for Ok values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.:==-Tuple{Some,Some}","page":"Results.Types","title":"Base.:==","text":"Base.isequal for Some values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.eltype-Tuple{Type{#s13} where #s13<:Err}","page":"Results.Types","title":"Base.eltype","text":"eltype for Err values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.eltype-Tuple{Type{Nothing}}","page":"Results.Types","title":"Base.eltype","text":"eltype for None values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.eltype-Union{Tuple{Type{Ok{T}}}, Tuple{T}} where T","page":"Results.Types","title":"Base.eltype","text":"eltype for Ok values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.eltype-Union{Tuple{Type{Some{T}}}, Tuple{T}} where T","page":"Results.Types","title":"Base.eltype","text":"eltype for Some values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.iterate-Tuple{Err}","page":"Results.Types","title":"Base.iterate","text":"iterate for Err values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.iterate-Tuple{Nothing}","page":"Results.Types","title":"Base.iterate","text":"iterate for None values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.iterate-Union{Tuple{Ok{T}}, Tuple{T}} where T","page":"Results.Types","title":"Base.iterate","text":"iterate for Ok values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.iterate-Union{Tuple{Some{T}}, Tuple{T}} where T","page":"Results.Types","title":"Base.iterate","text":"iterate for Some values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.length-Tuple{Err}","page":"Results.Types","title":"Base.length","text":"length for Err values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.length-Tuple{Nothing}","page":"Results.Types","title":"Base.length","text":"length for None values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.length-Tuple{Ok}","page":"Results.Types","title":"Base.length","text":"length for Ok values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.length-Tuple{Some}","page":"Results.Types","title":"Base.length","text":"length for Some values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.show-Tuple{IO,Err}","page":"Results.Types","title":"Base.show","text":"show for Err values\n\n\n\n\n\n","category":"method"},{"location":"api/Types/#Base.show-Tuple{IO,Ok}","page":"Results.Types","title":"Base.show","text":"show for Ok values\n\n\n\n\n\n","category":"method"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"CurrentModule = Results","category":"page"},{"location":"quickref/#Quick-Reference","page":"Quick Reference","title":"Quick Reference","text":"","category":"section"},{"location":"quickref/#Functions","page":"Quick Reference","title":"Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"The functions provided fall into a few main types:","category":"page"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Input functions convert values into result types\nOutput functions convert result types back into values\nTransform functions operate on result types\nPredicate functions return booleans\nCollection functions provide an interface to access collections without exceptions.","category":"page"},{"location":"quickref/#Input-Functions","page":"Quick Reference","title":"Input Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Works on Function Description\nResult to_result Convert nullable to Result\nOption to_option Convert nullable to Option","category":"page"},{"location":"quickref/#Output-Functions","page":"Quick Reference","title":"Output Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Works on Function Description\nBoth unwrap Return inner value or throw an error\nBoth unwrap_or Return inner value or default value\nBoth to_nullable Convert Result/Option into a nullable value","category":"page"},{"location":"quickref/#Transform-Functions","page":"Quick Reference","title":"Transform Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Works on Function Description\nResult ok Convert Result to Option\nOption ok_or Convert Option to Result\nBoth try_map Map a function over one or more result values\nResult map_err Map a function over an error value\nBoth and_then Chain fallable functions together\nBoth try_collect Collect an iterable of results into a result containing an array\nOption try_collect_option Version of try_collect specialized for Option. Unexported.\nResult try_collect_result Version of try_collect specialized for Result. Unexported.\nBoth flatten Flatten a nested result type","category":"page"},{"location":"quickref/#Predicate-Functions","page":"Quick Reference","title":"Predicate Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Works on Function Description\nResult is_ok Return if a Result is Ok\nResult is_err Return if a Result is Err\nOption is_some Return if an Option is Some.\nOption is_none Return if an Option is None\nBoth has_val Return if a result type is a success.","category":"page"},{"location":"quickref/#Collection-Functions","page":"Quick Reference","title":"Collection Functions","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Works on Function Description\nOption try_pop! Try to pop! a value from a collection. Also works with Iterators.Stateful.\nOption try_get Try to get a value from a collection\nOption try_peek Try to peek a value from an iterator\nOption try_first Try to get the first value in a collection\nOption try_last Try to get the last value in a collection","category":"page"},{"location":"quickref/#Macros","page":"Quick Reference","title":"Macros","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Macro Description\n@unwrap_or Short-circuiting version of unwrap_or, which allows for the embedding of control statements.\n@try_unwrap Unwraps a value or bubbles an error upstream.\n@some_if Evaluates and returns Some if a predicate is satisfied\n@catch_result Catch an exception and return it as a Result instead\n@if_let Conditionally unwrap a value inside of a block\n@while_let Run a loop while successful","category":"page"},{"location":"quickref/#Operators","page":"Quick Reference","title":"Operators","text":"","category":"section"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"The following operators are overloaded for use with Result types:","category":"page"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Operator Description\nBase.:& And/all operator, returns the first Err value. Supports closures for lazy evaluation.\nBase.:| Or/any operator, returns the first Ok value. Supports closures for lazy evaluation.\nBase.:! Flips Ok and Error values, turning Result{T, E} into Result{E, T}.","category":"page"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"In addition, three new operators are introduced for use with Results and Options:","category":"page"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"Operator Description\n← try_map: applies a function to the inside of a result type.\n→ Argument-flipped version of try_map.\n⊗ and_then/monadic bind: connects fallable functions together and returns errors early.","category":"page"},{"location":"quickref/","page":"Quick Reference","title":"Quick Reference","text":"These new operators are not exported by default.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Results","category":"page"},{"location":"#Results.jl-Documentation","page":"Home","title":"Results.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Results.jl provides a Result and Option type for computation, as featured in Rust, Haskell (as Either), OCaml, and many more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The core Result type is simply an alias for Union{Ok{T}, Err{E}}, allowing you to dispatch on Ok and Err variants separately. The Option type is defined as Union{Base.Some{T}, Base.Nothing}, allowing for easy compatibility with other libraries.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a quick overview of the supported functions, visit the Quick Reference. For a detailed description of each function, visit the API. A tutorial and examples are under construction.","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"quickref.md\", \"api.md\", \"api/Types.md\",\n         \"api/Functions.md\", \"api/Macros.md\", \"api/Collection.md\"]\nDepth = 5","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
